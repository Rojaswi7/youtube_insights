# app.py
import streamlit as st
from fetch_comments import fetch_comments_for_videos
from analysis_core import analyze_comments, cluster_summary
import pandas as pd
from collections import Counter

st.set_page_config(page_title="YouTube Comment Insights", layout="wide")
st.title("YouTube Comment Insights — Phase 1 + Phase 2 (Free)")

with st.sidebar:
    st.header("Inputs")
    api_key = st.text_input("YouTube API key", type="password")
    videos_text = st.text_area("Video URLs or IDs (one per line)", value="")
    max_comments = st.slider("Max comments per video", 50, 2000, 500, 50)
    run_button = st.button("Run analysis")

if run_button:
    if not api_key:
        st.error("Please provide your YouTube API key in the sidebar.")
    else:
        video_lines = [v.strip() for v in videos_text.splitlines() if v.strip()]
        if not video_lines:
            st.error("Provide at least one video URL or ID.")
        else:
            with st.spinner("Fetching comments..."):
                comments = fetch_comments_for_videos(video_lines, api_key, max_comments_per_video=max_comments)
            st.success(f"Fetched {len(comments)} comments (including replies).")

            # remove empty or invalid comments
            comments = [c for c in comments if 'text' in c and c['text'].strip() != '']

            with st.spinner("Analyzing comments (embeddings, clusters, sentiment)... This may take a few minutes"):
                df_all, kw = analyze_comments(comments)

            st.success("Analysis complete.")

            # show cluster summaries
            summaries = cluster_summary(df_all, kw, top_examples=3)
            st.header("Cluster Summaries")
            for s in summaries:
                st.subheader(f"Cluster {s['cluster_id']} — {s['count']} comments")
                st.write("Keywords:", ", ".join(s['keywords']))
                st.write("Sentiment:", s['sentiment'])
                st.write("Examples:")
                for ex in s['examples']:
                    st.write("- ", ex)

            # cross-video comparison
            st.header("Cross-video cluster counts")
            pivot = pd.pivot_table(df_all[~df_all['is_spam']], index='cluster', columns='video_id', values='comment_id', aggfunc='count', fill_value=0)
            st.dataframe(pivot)

            # trends
            cols = list(pivot.columns)
            trend_rows = []
            if len(cols) > 1:
                for cluster in pivot.index:
                    first, last = pivot.loc[cluster, cols[0]], pivot.loc[cluster, cols[-1]]
                    pct_change = float('inf') if first == 0 else (last - first) / first * 100
                    trend_rows.append({"cluster": cluster, "first": first, "last": last, "pct_change": (pct_change if pct_change != float('inf') else '∞')})
                st.table(pd.DataFrame(trend_rows))
